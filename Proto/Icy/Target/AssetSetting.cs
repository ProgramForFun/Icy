// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AssetSetting.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Icy.Asset {

  /// <summary>Holder for reflection information generated from AssetSetting.proto</summary>
  public static partial class AssetSettingReflection {

    #region Descriptor
    /// <summary>File descriptor for AssetSetting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AssetSettingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJBc3NldFNldHRpbmcucHJvdG8SCUljeS5Bc3NldCK7AQoMQXNzZXRTZXR0",
            "aW5nEiIKGkFzc2V0SG9zdFNlcnZlckFkZHJlc3NNYWluGAEgASgJEiUKHUFz",
            "c2V0SG9zdFNlcnZlckFkZHJlc3NTdGFuZGJ5GAIgASgJEhkKEVBhdGNoRExM",
            "Q29weVRvRGlyGAMgASgJEhwKFE1ldGFEYXRhRExMQ29weVRvRGlyGAQgASgJ",
            "EhEKCVBhdGNoRExMcxgFIAMoCRIUCgxNZXRhRGF0YURMTHMYBiADKAliBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Icy.Asset.AssetSetting), global::Icy.Asset.AssetSetting.Parser, new[]{ "AssetHostServerAddressMain", "AssetHostServerAddressStandby", "PatchDLLCopyToDir", "MetaDataDLLCopyToDir", "PatchDLLs", "MetaDataDLLs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AssetSetting : pb::IMessage<AssetSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetSetting> _parser = new pb::MessageParser<AssetSetting>(() => new AssetSetting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Icy.Asset.AssetSettingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSetting(AssetSetting other) : this() {
      assetHostServerAddressMain_ = other.assetHostServerAddressMain_;
      assetHostServerAddressStandby_ = other.assetHostServerAddressStandby_;
      patchDLLCopyToDir_ = other.patchDLLCopyToDir_;
      metaDataDLLCopyToDir_ = other.metaDataDLLCopyToDir_;
      patchDLLs_ = other.patchDLLs_.Clone();
      metaDataDLLs_ = other.metaDataDLLs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSetting Clone() {
      return new AssetSetting(this);
    }

    /// <summary>Field number for the "AssetHostServerAddressMain" field.</summary>
    public const int AssetHostServerAddressMainFieldNumber = 1;
    private string assetHostServerAddressMain_ = "";
    /// <summary>
    ///热更新资源Host地址（主）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetHostServerAddressMain {
      get { return assetHostServerAddressMain_; }
      set {
        assetHostServerAddressMain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AssetHostServerAddressStandby" field.</summary>
    public const int AssetHostServerAddressStandbyFieldNumber = 2;
    private string assetHostServerAddressStandby_ = "";
    /// <summary>
    ///热更新资源Host地址（备）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetHostServerAddressStandby {
      get { return assetHostServerAddressStandby_; }
      set {
        assetHostServerAddressStandby_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PatchDLLCopyToDir" field.</summary>
    public const int PatchDLLCopyToDirFieldNumber = 3;
    private string patchDLLCopyToDir_ = "";
    /// <summary>
    ///打包过程中，会将HybridCLR编译出的热更DLL，Copy到此目录，方便业务侧将其打包成AB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PatchDLLCopyToDir {
      get { return patchDLLCopyToDir_; }
      set {
        patchDLLCopyToDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MetaDataDLLCopyToDir" field.</summary>
    public const int MetaDataDLLCopyToDirFieldNumber = 4;
    private string metaDataDLLCopyToDir_ = "";
    /// <summary>
    ///在BuildWindow执行HybridCLR Generate All时，会将生成的补充元数据DLL，Copy到此目录，方便业务侧将其打包成AB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MetaDataDLLCopyToDir {
      get { return metaDataDLLCopyToDir_; }
      set {
        metaDataDLLCopyToDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PatchDLLs" field.</summary>
    public const int PatchDLLsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_patchDLLs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> patchDLLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///HybridCLR热更DLL列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> PatchDLLs {
      get { return patchDLLs_; }
    }

    /// <summary>Field number for the "MetaDataDLLs" field.</summary>
    public const int MetaDataDLLsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_metaDataDLLs_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> metaDataDLLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///HybridCLR补充元数据DLL列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> MetaDataDLLs {
      get { return metaDataDLLs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetHostServerAddressMain != other.AssetHostServerAddressMain) return false;
      if (AssetHostServerAddressStandby != other.AssetHostServerAddressStandby) return false;
      if (PatchDLLCopyToDir != other.PatchDLLCopyToDir) return false;
      if (MetaDataDLLCopyToDir != other.MetaDataDLLCopyToDir) return false;
      if(!patchDLLs_.Equals(other.patchDLLs_)) return false;
      if(!metaDataDLLs_.Equals(other.metaDataDLLs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetHostServerAddressMain.Length != 0) hash ^= AssetHostServerAddressMain.GetHashCode();
      if (AssetHostServerAddressStandby.Length != 0) hash ^= AssetHostServerAddressStandby.GetHashCode();
      if (PatchDLLCopyToDir.Length != 0) hash ^= PatchDLLCopyToDir.GetHashCode();
      if (MetaDataDLLCopyToDir.Length != 0) hash ^= MetaDataDLLCopyToDir.GetHashCode();
      hash ^= patchDLLs_.GetHashCode();
      hash ^= metaDataDLLs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AssetHostServerAddressMain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetHostServerAddressMain);
      }
      if (AssetHostServerAddressStandby.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetHostServerAddressStandby);
      }
      if (PatchDLLCopyToDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PatchDLLCopyToDir);
      }
      if (MetaDataDLLCopyToDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MetaDataDLLCopyToDir);
      }
      patchDLLs_.WriteTo(output, _repeated_patchDLLs_codec);
      metaDataDLLs_.WriteTo(output, _repeated_metaDataDLLs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AssetHostServerAddressMain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetHostServerAddressMain);
      }
      if (AssetHostServerAddressStandby.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetHostServerAddressStandby);
      }
      if (PatchDLLCopyToDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PatchDLLCopyToDir);
      }
      if (MetaDataDLLCopyToDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MetaDataDLLCopyToDir);
      }
      patchDLLs_.WriteTo(ref output, _repeated_patchDLLs_codec);
      metaDataDLLs_.WriteTo(ref output, _repeated_metaDataDLLs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AssetHostServerAddressMain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetHostServerAddressMain);
      }
      if (AssetHostServerAddressStandby.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetHostServerAddressStandby);
      }
      if (PatchDLLCopyToDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatchDLLCopyToDir);
      }
      if (MetaDataDLLCopyToDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MetaDataDLLCopyToDir);
      }
      size += patchDLLs_.CalculateSize(_repeated_patchDLLs_codec);
      size += metaDataDLLs_.CalculateSize(_repeated_metaDataDLLs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetSetting other) {
      if (other == null) {
        return;
      }
      if (other.AssetHostServerAddressMain.Length != 0) {
        AssetHostServerAddressMain = other.AssetHostServerAddressMain;
      }
      if (other.AssetHostServerAddressStandby.Length != 0) {
        AssetHostServerAddressStandby = other.AssetHostServerAddressStandby;
      }
      if (other.PatchDLLCopyToDir.Length != 0) {
        PatchDLLCopyToDir = other.PatchDLLCopyToDir;
      }
      if (other.MetaDataDLLCopyToDir.Length != 0) {
        MetaDataDLLCopyToDir = other.MetaDataDLLCopyToDir;
      }
      patchDLLs_.Add(other.patchDLLs_);
      metaDataDLLs_.Add(other.metaDataDLLs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetHostServerAddressMain = input.ReadString();
            break;
          }
          case 18: {
            AssetHostServerAddressStandby = input.ReadString();
            break;
          }
          case 26: {
            PatchDLLCopyToDir = input.ReadString();
            break;
          }
          case 34: {
            MetaDataDLLCopyToDir = input.ReadString();
            break;
          }
          case 42: {
            patchDLLs_.AddEntriesFrom(input, _repeated_patchDLLs_codec);
            break;
          }
          case 50: {
            metaDataDLLs_.AddEntriesFrom(input, _repeated_metaDataDLLs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AssetHostServerAddressMain = input.ReadString();
            break;
          }
          case 18: {
            AssetHostServerAddressStandby = input.ReadString();
            break;
          }
          case 26: {
            PatchDLLCopyToDir = input.ReadString();
            break;
          }
          case 34: {
            MetaDataDLLCopyToDir = input.ReadString();
            break;
          }
          case 42: {
            patchDLLs_.AddEntriesFrom(ref input, _repeated_patchDLLs_codec);
            break;
          }
          case 50: {
            metaDataDLLs_.AddEntriesFrom(ref input, _repeated_metaDataDLLs_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
